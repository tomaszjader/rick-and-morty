{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","data","setData","useEffect","req","XMLHttpRequest","open","send","onload","status","myresponseText","JSON","parse","responseText","console","log","results","listItems","map","d","name","species","type","gender","created","src","image","alt","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oNA0CeA,EAtCH,WACT,MAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACDC,qBAAU,WACR,IAAMC,EAAM,IAAIC,eAChBD,EAAIE,KAAK,MAAO,6CAA6C,GAC7DF,EAAIG,OAEJH,EAAII,OAAS,WACX,GAAmB,MAAfJ,EAAIK,OAAgB,CACtB,IAAMC,EAAiBC,KAAKC,MAAMR,EAAIS,cACtCC,QAAQC,IAAIL,GACZ,IAAMM,EAAUN,EAAeM,QAC/Bd,EAAQc,OAGX,IACH,IACMC,EADQhB,EACUiB,KAAI,SAACC,GAC3B,OACE,mCACE,+BACGA,EAAEC,KADL,MACcD,EAAEV,OADhB,KAC0BU,EAAEE,QAD5B,KACuCF,EAAEG,KAAOH,EAAEG,KAAO,UADzD,IAEGH,EAAEI,OAFL,KAEeJ,EAAEK,QACf,qBAAKC,IAAKN,EAAEO,MAAOC,IAAKR,EAAEC,SAHnBD,EAAEO,YASjB,OACE,8BACE,oBAAKE,UAAU,YAAf,SACGX,OCxBMY,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.1fc42f70.chunk.js","sourcesContent":["import './App.css';\nimport { useEffect, useState } from 'react';\n\n\nconst App = () => {\n   const [data, setData] = useState([]);\n  useEffect(() => {\n    const req = new XMLHttpRequest();\n    req.open(\"GET\", \"https://rickandmortyapi.com/api/character\", true);\n    req.send();\n\n    req.onload = () => {\n      if (req.status === 200) {\n        const myresponseText = JSON.parse(req.responseText);\n        console.log(myresponseText);\n        const results = myresponseText.results;\n        setData(results);\n      }\n    };\n  }, []);\n  const data1 = data;\n  const listItems = data1.map((d,index=0) => {\n    return (\n      <>\n        <li key={d.image}>\n          {d.name} , {d.status}, {d.species}, {d.type ? d.type : \"no type\"},\n          {d.gender}, {d.created}\n          <img src={d.image} alt={d.name} />\n        </li>\n      </>\n    );\n   \n  });\n  return (\n    <div >\n      <ul  className=\"conteiner\">\n        {listItems}\n      </ul>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}