{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["SimpleNavigation","props","className","curentPages","map","i","href","onClick","req","XMLHttpRequest","open","send","onload","status","results","JSON","parse","responseText","setData","fetchMoreData","Character","d","name","species","type","gender","created","slice","src","image","alt","id","App","useState","data","search","setSearch","Array","from","length","_","useEffect","myresponseText","console","log","placeholder","onChange","event","target","value","filter","toLowerCase","includes","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oNAKMA,EAAmB,SAACC,GAkBxB,OACE,qBAAKC,UAAU,OAAf,SACE,oBAAIA,UAAU,UAAd,SACGD,EAAME,YAAYC,KAAI,SAACC,GAEtB,OACE,oBAAYH,UAAU,WAAtB,SACE,oBAAGI,KAAK,OAAOC,QAAS,kBAxBd,SAACF,GACrB,IAAMG,EAAM,IAAIC,eAChBD,EAAIE,KACF,MADF,0DAEqDL,IACnD,GAEFG,EAAIG,OACJH,EAAII,OAAS,WACX,GAAmB,MAAfJ,EAAIK,OAAgB,CACtB,IACMC,EADiBC,KAAKC,MAAMR,EAAIS,cACPH,QAE/Bb,EAAMiB,QAAQJ,KAWsBK,CAAcd,IAA5C,cAAmDA,EAAnD,SADOA,WAUfe,EAAY,SAACnB,GACjB,OACE,qBAAmBC,UAAU,OAA7B,UACE,qBAAIA,UAAU,cAAd,UACE,oBAAIA,UAAU,eAAd,SAA8BD,EAAMoB,EAAEC,OACtC,oBAAIpB,UAA8B,UAAnBD,EAAMoB,EAAER,OAAqB,QAAU,OAAtD,SACGZ,EAAMoB,EAAER,SAEX,6BAAKZ,EAAMoB,EAAEE,UACb,6BAAKtB,EAAMoB,EAAEG,KAAOvB,EAAMoB,EAAEG,KAAO,YACnC,6BAAKvB,EAAMoB,EAAEI,SACb,+BACGxB,EAAMoB,EAAEK,QAAQC,MAAM,EAAG,IAD5B,IACkC1B,EAAMoB,EAAEK,QAAQC,MAAM,GAAI,UAG9D,qBACEzB,UAAU,QAEV0B,IAAK3B,EAAMoB,EAAEQ,MACbC,IAAK7B,EAAMoB,EAAEC,MAFRrB,EAAMoB,EAAEQ,SAfR5B,EAAM8B,KA8EJC,EAvDH,WACV,MAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAahB,EAAb,KAEA,EAA4Be,mBAAS,IAArC,mBAAOE,EAAP,KAAeC,EAAf,KAEMjC,EAAckC,MAAMC,KAAK,CAAEC,OAAQ,KAAM,SAACC,EAAGnC,GAAJ,OAAUA,EAAI,KAiB7D,OAfAoC,qBAAU,WACR,IAAMjC,EAAM,IAAIC,eAChBD,EAAIE,KAAK,MAAO,6CAA6C,GAC7DF,EAAIG,OAEJH,EAAII,OAAS,WACX,GAAmB,MAAfJ,EAAIK,OAAgB,CACtB,IAAM6B,EAAiB3B,KAAKC,MAAMR,EAAIS,cACtC0B,QAAQC,IAAIF,GACZ,IAAM5B,EAAU4B,EAAe5B,QAC/BI,EAAQJ,OAGX,IAGD,uBAAMZ,UAAU,OAAhB,UACE,qBAAKA,UAAU,QAAQ6B,GAAG,MAA1B,SACE,uBACE7B,UAAU,cACVsB,KAAK,OACLqB,YAAY,sBACZC,SAAU,SAACC,GACTX,EAAUW,EAAMC,OAAOC,YAI7B,oBAAI/C,UAAU,YAAd,SACGgC,EACEgB,QAAO,SAAC7B,GACP,MAAe,KAAXc,GAEOd,EAAEC,KAAK6B,cAAcC,SAASjB,EAAOgB,eADvC9B,OACF,KAIRjB,KAAI,SAACiB,EAAGU,GACP,OAAO,cAAC,EAAD,CAAoBA,GAAIA,EAAIV,EAAGA,GAAfU,QAG7B,cAAC,EAAD,CACE5B,YAAaA,EACbe,QAASA,QCrGFmC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.f525a4f7.chunk.js","sourcesContent":["import \"./App.css\";\nimport React, { useEffect, useState } from \"react\";\nimport ReactDOM from \"react-dom\";\n\n\nconst SimpleNavigation = (props) => {\n  const fetchMoreData = (i) => {\n    const req = new XMLHttpRequest();\n    req.open(\n      \"GET\",\n      `https://rickandmortyapi.com/api/character/?page=${i}`,\n      true\n    );\n    req.send();\n    req.onload = () => {\n      if (req.status === 200) {\n        const myresponseText = JSON.parse(req.responseText);\n        const results = myresponseText.results;\n\n        props.setData(results);\n      }\n    };\n  };\n  return (\n    <nav className=\"menu\">\n      <ul className=\"nav-bar\">\n        {props.curentPages.map((i) => {\n          \n          return (\n            <li key={i} className=\"list-nav\">\n              <a href=\"#top\" onClick={() => fetchMoreData(i)} > {i}  </a>\n            </li>\n          );\n        })}\n      </ul>\n    </nav>\n  );\n};\n\nconst Character = (props) => {\n  return (\n    <li key={props.id} className=\"list\">\n      <ul className=\"list--style\">\n        <li className=\"list--header\">{props.d.name}</li>\n        <li className={props.d.status === \"Alive\" ? \"alive\" : \"dead\"}>\n          {props.d.status}\n        </li>\n        <li>{props.d.species}</li>\n        <li>{props.d.type ? props.d.type : \"no type\"}</li>\n        <li>{props.d.gender}</li>\n        <li>\n          {props.d.created.slice(0, 10)} {props.d.created.slice(11, 16)}\n        </li>\n      </ul>\n      <img\n        className=\"image\"\n        key={props.d.image}\n        src={props.d.image}\n        alt={props.d.name}\n      />\n    </li>\n  );\n};\n\nconst App = () => {\n  const [data, setData] = useState([]);\n\n  const [search, setSearch] = useState(\"\");\n\n  const curentPages = Array.from({ length: 34 }, (_, i) => i + 1);\n\n  useEffect(() => {\n    const req = new XMLHttpRequest();\n    req.open(\"GET\", \"https://rickandmortyapi.com/api/character\", true);\n    req.send();\n\n    req.onload = () => {\n      if (req.status === 200) {\n        const myresponseText = JSON.parse(req.responseText);\n        console.log(myresponseText);\n        const results = myresponseText.results;\n        setData(results);\n      }\n    };\n  }, []);\n\n  return (\n    <main className=\"main\">\n      <div className=\"serch\" id=\"top\">\n        <input\n          className=\"serch-input\"\n          type=\"text\"\n          placeholder=\"Choose a character:\"\n          onChange={(event) => {\n            setSearch(event.target.value);\n          }}\n        />\n      </div>\n      <ul className=\"conteiner\">\n        {data\n          .filter((d) => {\n            if (search === \"\") {\n              return d;\n            } else if (d.name.toLowerCase().includes(search.toLowerCase())) {\n              return d;\n            }\n          })\n          .map((d, id) => {\n            return <Character key={id} id={id} d={d} />;\n          })}\n      </ul>\n      <SimpleNavigation\n        curentPages={curentPages}\n        setData={setData}\n      ></SimpleNavigation>\n    </main>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}