{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Character","props","className","d","name","status","species","type","gender","created","src","image","alt","id","App","useState","data","setData","page","setPage","search","setSearch","isScroling","setIsScroling","useEffect","req","XMLHttpRequest","open","send","onload","myresponseText","JSON","parse","responseText","console","log","results","placeholder","onChange","event","target","value","dataLength","length","next","concat","fetchMoreData","hasMore","loader","filter","toLowerCase","includes","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iPAIMA,EAAY,SAACC,GACjB,OACE,qBAAmBC,UAAU,OAA7B,UACE,qBAAIA,UAAU,cAAd,UACE,oBAAIA,UAAU,eAAd,SAA8BD,EAAME,EAAEC,OACtC,oBAAIF,UAA8B,UAAnBD,EAAME,EAAEE,OAAqB,QAAU,OAAtD,SACGJ,EAAME,EAAEE,SAEX,6BAAKJ,EAAME,EAAEG,UACb,6BAAKL,EAAME,EAAEI,KAAON,EAAME,EAAEI,KAAO,YACnC,6BAAKN,EAAME,EAAEK,SACb,6BAAKP,EAAME,EAAEM,aAEf,qBACEP,UAAU,QAEVQ,IAAKT,EAAME,EAAEQ,MACbC,IAAKX,EAAME,EAAEC,MAFRH,EAAME,EAAEQ,SAbRV,EAAMY,KA6GJC,EAxFH,WACV,MAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAAwBF,mBAAS,GAAjC,mBAAOG,EAAP,KAAaC,EAAb,KACA,EAA4BJ,mBAAS,IAArC,mBAAOK,EAAP,KAAeC,EAAf,KACA,EAAoCN,oBAAS,GAA7C,mBAAOO,EAAP,KAAmBC,EAAnB,KAGAC,qBAAU,WACR,IAAMC,EAAM,IAAIC,eAChBD,EAAIE,KAAK,MAAO,6CAA6C,GAC7DF,EAAIG,OAEJH,EAAII,OAAS,WACX,GAAmB,MAAfJ,EAAIpB,OAAgB,CACtB,IAAMyB,EAAiBC,KAAKC,MAAMP,EAAIQ,cACtCC,QAAQC,IAAIL,GACZ,IAAMM,EAAUN,EAAeM,QAC/BnB,EAAQmB,OAIX,IA0BH,OACE,gCACE,qBAAKlC,UAAU,QAAf,SACE,uBACEA,UAAU,cACVK,KAAK,OACL8B,YAAY,kCACZC,SAAU,SAACC,GACTlB,EAAUkB,EAAMC,OAAOC,YAK7B,6BACE,cAAC,IAAD,CACEvC,UAAU,YACVwC,WAAY1B,EAAK2B,OACjBC,KAAM,kBA1CQ,WACpB,GAAa,KAAT1B,EAAJ,CAIA,IAAMO,EAAM,IAAIC,eAChBD,EAAIE,KACF,MADF,0DAEqDT,IACnD,GAEFO,EAAIG,OACJH,EAAII,OAAS,WACX,GAAmB,MAAfJ,EAAIpB,OAAgB,CACtB,IAAMyB,EAAiBC,KAAKC,MAAMP,EAAIQ,cACtCC,QAAQC,IAAIL,GACZ,IAAMM,EAAUN,EAAeM,QAE/BnB,EADgBD,EACA6B,OAAOT,IACvBjB,EAAQD,EAAO,UAjBjBK,GAAc,GAwCEuB,IACZC,QAASzB,EACT0B,OAAQ,4CALV,SAOGhC,EACEiC,QAAO,SAAC9C,GACP,MAAe,KAAXiB,GAEOjB,EAAEC,KAAK8C,cAAcC,SAAS/B,EAAO8B,eADvC/C,OACF,KAIRiD,KAAI,SAACjD,EAAGU,GACP,OAAWV,EAAEwC,OACJ,cAAC,EAAD,CAAoB9B,GAAIA,EAAIV,EAAGA,GAAfU,cC7FxBwC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.da2c7f5d.chunk.js","sourcesContent":["import \"./App.css\";\nimport React, { useEffect, useState } from \"react\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\n\nconst Character = (props) => {\n  return (\n    <li key={props.id} className=\"list\" >\n      <ul className=\"list--style\">\n        <li className=\"list--header\">{props.d.name}</li>\n        <li className={props.d.status === \"Alive\" ? \"alive\" : \"dead\"}>\n          {props.d.status}\n        </li>\n        <li>{props.d.species}</li>\n        <li>{props.d.type ? props.d.type : \"no type\"}</li>\n        <li>{props.d.gender}</li>\n        <li>{props.d.created}</li>\n      </ul>\n      <img\n        className=\"image\"\n        key={props.d.image}\n        src={props.d.image}\n        alt={props.d.name}\n      />\n    </li>\n  );\n}\n\nconst App = () => {\n  const [data, setData] = useState([]);\n  const [page, setPage] = useState(1);\n  const [search, setSearch] = useState(\"\");\n  const [isScroling, setIsScroling] = useState(true);\n  \n\n  useEffect(() => {\n    const req = new XMLHttpRequest();\n    req.open(\"GET\", \"https://rickandmortyapi.com/api/character\", true);\n    req.send();\n\n    req.onload = () => {\n      if (req.status === 200) {\n        const myresponseText = JSON.parse(req.responseText);\n        console.log(myresponseText);\n        const results = myresponseText.results;\n        setData(results);\n        \n      }\n    };\n  }, []);\n  const fetchMoreData = () => {\n    if (page === 34) {\n      setIsScroling(false);\n      return;\n    }\n    const req = new XMLHttpRequest();\n    req.open(\n      \"GET\",\n      `https://rickandmortyapi.com/api/character/?page=${page}`,\n      true\n    );\n    req.send();\n    req.onload = () => {\n      if (req.status === 200) {\n        const myresponseText = JSON.parse(req.responseText);\n        console.log(myresponseText);\n        const results = myresponseText.results;\n        const tmpData = data;\n        setData(tmpData.concat(results));\n        setPage(page + 1);\n      }\n    };\n  };\n  \n  \n  return (\n    <div>\n      <div className=\"serch\">\n        <input\n          className=\"serch-input\"\n          type=\"text\"\n          placeholder=\"Give the name of the character:\"\n          onChange={(event) => {\n            setSearch(event.target.value);\n          }}\n        />\n      </div>\n\n      <ul>\n        <InfiniteScroll\n          className=\"conteiner\"\n          dataLength={data.length}\n          next={() => fetchMoreData()}\n          hasMore={isScroling}\n          loader={<h4>Loading...</h4>}\n        >\n          {data\n            .filter((d) => {\n              if (search === \"\") {\n                return d;\n              } else if (d.name.toLowerCase().includes(search.toLowerCase())) {\n                return d;\n              }\n            })\n            .map((d, id) => {\n              if (id === d.length - 1) {\n                return <Character key={id} id={id} d={d} />;\n              }\n              return <Character key={id} id={id} d={d} />;\n            })}\n        </InfiniteScroll>\n      </ul>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}